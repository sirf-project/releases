name: Build and Release All Images

on:
  schedule:
    - cron: '0 2 * * *'  # Daily at 2 AM UTC
  push:
    paths:
      - 'Dockerfile'
      - 'docker-bake.hcl'
      - '.github/workflows/build-and-release.yml'
    branches:
      - main
  workflow_dispatch:

jobs:
  # Build multi-arch images using bake with QEMU
  build:
    strategy:
      matrix:
        target:
          - core24-all
          - core24-apt
          - core24-flatpak
          - core24-snap
          - lts-all
          - lts-apt
          - lts-flatpak
          - lts-snap
          - stable-all
          - stable-apt
          - stable-flatpak
          - stable-snap
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      id-token: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to Quay Registry
        uses: docker/login-action@v3
        with:
          registry: quay.io
          username: ${{ secrets.QUAY_USERNAME }}
          password: ${{ secrets.QUAY_PASSWORD }}

      - name: Build and push ${{ matrix.target }} (multi-arch)
        uses: docker/bake-action@v5
        with:
          files: docker-bake.hcl
          targets: ${{ matrix.target }}
          push: true

      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Extract base and variant from target
        id: parse
        run: |
          TARGET="${{ matrix.target }}"
          BASE="${TARGET%-*}"
          VARIANT="${TARGET##*-}"
          echo "base=${BASE}" >> $GITHUB_OUTPUT
          echo "variant=${VARIANT}" >> $GITHUB_OUTPUT

      - name: Get digests and sign images
        env:
          BASE: ${{ steps.parse.outputs.base }}
          VARIANT: ${{ steps.parse.outputs.variant }}
        run: |
          # Get digests
          GHCR_DIGEST=$(docker buildx imagetools inspect ghcr.io/sirf-project/releases/${BASE}:${VARIANT} | grep "^Digest:" | awk '{print $2}')
          QUAY_DIGEST=$(docker buildx imagetools inspect quay.io/sirf-project/releases/${BASE}:${VARIANT} | grep "^Digest:" | awk '{print $2}')

          echo "✓ GHCR digest: ${GHCR_DIGEST}"
          echo "✓ Quay digest: ${QUAY_DIGEST}"

          # Sign images
          echo "Signing images..."
          cosign sign --yes ghcr.io/sirf-project/releases/${BASE}@${GHCR_DIGEST}
          cosign sign --yes quay.io/sirf-project/releases/${BASE}@${QUAY_DIGEST}
          echo "✓ ${BASE}:${VARIANT} signed"

          # Save digest info for later
          echo "${BASE}:${VARIANT}=${GHCR_DIGEST},${QUAY_DIGEST}" >> /tmp/digest-${{ matrix.target }}.txt

      - name: Upload digest artifact
        uses: actions/upload-artifact@v4
        with:
          name: digest-${{ matrix.target }}
          path: /tmp/digest-${{ matrix.target }}.txt
          retention-days: 1

  # Update ubuntu.json and publish to GitHub Release
  publish-manifest:
    needs: build
    runs-on: ubuntu-24.04
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4

      - name: Download all digest artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: digest-*
          path: /tmp/digests
          merge-multiple: true

      - name: Generate ubuntu.json with digests for release
        run: |
          python3 << 'EOF'
          import json
          from datetime import datetime, timezone
          from pathlib import Path

          # Load base ubuntu.json (without digest fields)
          with open('ubuntu.json', 'r') as f:
              config = json.load(f)

          # Process all digest files and add digest fields dynamically
          digest_dir = Path('/tmp/digests')
          updated_count = 0

          for digest_file in sorted(digest_dir.glob('digest-*.txt')):
              with open(digest_file, 'r') as f:
                  line = f.read().strip()
                  if not line:
                      continue

                  # Parse: base:variant=ghcr_digest,quay_digest
                  target, digests = line.split('=')
                  base, variant = target.split(':')
                  ghcr_digest, quay_digest = digests.split(',')

                  # Add digest fields dynamically
                  if base in config and variant in config[base]['image']:
                      timestamp = datetime.now(timezone.utc).isoformat()
                      config[base]['image'][variant]['github_digest'] = f"ghcr.io/sirf-project/releases/{base}@{ghcr_digest}"
                      config[base]['image'][variant]['quay_digest'] = f"quay.io/sirf-project/releases/{base}@{quay_digest}"
                      config[base]['image'][variant]['last_updated'] = timestamp
                      updated_count += 1
                      print(f"✓ Added digests for {base}:{variant}")
                  else:
                      print(f"⚠ {base}:{variant} not found in ubuntu.json")

          # Write enriched config for release
          with open('ubuntu.json', 'w') as f:
              json.dump(config, f, indent=4)
              f.write('\n')

          print(f"\n✓ Generated ubuntu.json with {updated_count} image digest entries")
          EOF

      - name: Publish ubuntu.json to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: latest
          name: Latest Image Manifests
          body: |
            # Ubuntu Container Image Manifests

            Updated: ${{ github.event.head_commit.timestamp }}
            Workflow: ${{ github.run_id }}

            This release contains the latest image digest references for all Ubuntu container variants.

            ## Usage

            Fetch the manifest:
            ```bash
            curl -sL https://github.com/sirf-project/releases/releases/download/latest/ubuntu.json
            ```

            ## Variants

            - **LTS**: Ubuntu 24.04 LTS (Noble Numbat)
            - **Stable**: Ubuntu 25.10 (Questing Quokka)
            - **Core24**: Ubuntu 24.04 Core

            Each variant available with: `apt`, `snap`, `flatpak`, `all`
          files: ubuntu.json
          prerelease: false
          make_latest: true
